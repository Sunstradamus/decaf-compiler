output prefix: llvm/dev/boolcallcalleeexpr
llvmas: /opt/local/libexec/llvm-3.8/bin/llvm-as
llc: /opt/local/libexec/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp
stdlib: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c
generating llvm code:/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp ... ok
; ModuleID = 'Test'

declare void @print_int(i32)

define void @test(i1) {
entry:
  %a = alloca i1
  store i1 %0, i1* %a
  %ld_a = load i1, i1* %a
  br i1 %ld_a, label %or_end, label %or_right

or_right:                                         ; preds = %entry
  br label %or_end

or_end:                                           ; preds = %or_right, %entry
  %orphi = phi i1 [ %ld_a, %entry ], [ %ld_a, %or_right ]
  %1 = zext i1 %orphi to i32
  call void @print_int(i32 %1)
  ret void
}

define i32 @main() {
entry:
  call void @test(i1 true)
  ret i32 0
}
assembling to bitcode:/opt/local/libexec/llvm-3.8/bin/llvm-as "llvm/dev/boolcallcalleeexpr.llvm" -o "llvm/dev/boolcallcalleeexpr.llvm.bc" ... ok
converting to native code:/opt/local/libexec/llvm-3.8/bin/llc "llvm/dev/boolcallcalleeexpr.llvm.bc" -o "llvm/dev/boolcallcalleeexpr.llvm.s" ... ok
linking:gcc -o "llvm/dev/boolcallcalleeexpr.llvm.exec" "llvm/dev/boolcallcalleeexpr.llvm.s" "/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/boolcallcalleeexpr.llvm.exec ... ok
