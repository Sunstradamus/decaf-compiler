output prefix: llvm/dev/shadow
llvmas: /opt/local/libexec/llvm-3.8/bin/llvm-as
llc: /opt/local/libexec/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp
stdlib: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c
generating llvm code:/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp ... ok
; ModuleID = 'Test'

declare void @print_int(i32)

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  %y = alloca i32
  store i32 0, i32* %y
  store i32 1, i32* %x
  store i32 100, i32* %y
  %ld_x = load i32, i32* %x
  call void @print_int(i32 %ld_x)
  %ld_y = load i32, i32* %y
  call void @print_int(i32 %ld_y)
  %x1 = alloca i32
  store i32 0, i32* %x1
  store i32 2, i32* %x1
  %ld_x2 = load i32, i32* %x1
  call void @print_int(i32 %ld_x2)
  %ld_y3 = load i32, i32* %y
  call void @print_int(i32 %ld_y3)
  %x4 = alloca i32
  store i32 0, i32* %x4
  store i32 3, i32* %x4
  %ld_x5 = load i32, i32* %x4
  call void @print_int(i32 %ld_x5)
  %ld_y6 = load i32, i32* %y
  call void @print_int(i32 %ld_y6)
  %x7 = alloca i32
  store i32 0, i32* %x7
  store i32 4, i32* %x7
  %ld_x8 = load i32, i32* %x7
  call void @print_int(i32 %ld_x8)
  %ld_y9 = load i32, i32* %y
  call void @print_int(i32 %ld_y9)
  %x10 = alloca i32
  store i32 0, i32* %x10
  store i32 5, i32* %x10
  %ld_x11 = load i32, i32* %x10
  call void @print_int(i32 %ld_x11)
  %ld_y12 = load i32, i32* %y
  call void @print_int(i32 %ld_y12)
  ret i32 0
}
assembling to bitcode:/opt/local/libexec/llvm-3.8/bin/llvm-as "llvm/dev/shadow.llvm" -o "llvm/dev/shadow.llvm.bc" ... ok
converting to native code:/opt/local/libexec/llvm-3.8/bin/llc "llvm/dev/shadow.llvm.bc" -o "llvm/dev/shadow.llvm.s" ... ok
linking:gcc -o "llvm/dev/shadow.llvm.exec" "llvm/dev/shadow.llvm.s" "/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/shadow.llvm.exec ... ok
