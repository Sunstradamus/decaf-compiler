output prefix: llvm/dev/prec
llvmas: /opt/local/libexec/llvm-3.8/bin/llvm-as
llc: /opt/local/libexec/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp
stdlib: /Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c
generating llvm code:/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decafcomp ... ok
; ModuleID = 'prec'

declare void @print_int(i32)

define i32 @main() {
entry:
  %a = alloca i32
  store i32 0, i32* %a
  %b = alloca i32
  store i32 0, i32* %b
  %d = alloca i32
  store i32 0, i32* %d
  %c = alloca i1
  store i1 false, i1* %c
  store i32 3, i32* %a
  store i32 7, i32* %b
  br i1 true, label %or_end, label %or_right

or_right:                                         ; preds = %entry
  br label %or_end

or_end:                                           ; preds = %or_right, %entry
  %orphi = phi i1 [ true, %entry ], [ true, %or_right ]
  store i1 %orphi, i1* %c
  store i32 -3, i32* %d
  %ld_a = load i32, i32* %a
  call void @print_int(i32 %ld_a)
  %ld_b = load i32, i32* %b
  call void @print_int(i32 %ld_b)
  %ld_c = load i1, i1* %c
  %0 = zext i1 %ld_c to i32
  call void @print_int(i32 %0)
  %ld_d = load i32, i32* %d
  call void @print_int(i32 %ld_d)
  ret i32 0
}
assembling to bitcode:/opt/local/libexec/llvm-3.8/bin/llvm-as "llvm/dev/prec.llvm" -o "llvm/dev/prec.llvm.bc" ... ok
converting to native code:/opt/local/libexec/llvm-3.8/bin/llc "llvm/dev/prec.llvm.bc" -o "llvm/dev/prec.llvm.s" ... ok
linking:gcc -o "llvm/dev/prec.llvm.exec" "llvm/dev/prec.llvm.s" "/Users/paul/Documents/school/SFU/Courses/Summer2016/CMPT379/homework1/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/prec.llvm.exec ... ok
